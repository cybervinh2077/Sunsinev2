const { Client, GatewayIntentBits, Partials, Collection } = require('discord.js');
const cron = require('node-cron');
require('dotenv').config();
const logger = require('./logger');
const {
    sendTaskDMs,
    postTaskSummary,
    fetchCompletions,
    announceCompletion,
    fetchTasks,
    deleteTask,
    getSystemResources,
    checkOverdueTasks,
    initializeOverdueColumn,
    logCompletionToSheet3,
    optimizeMemory
} = require('./taskManager');

// Import memory optimization variables from taskManager
const {
    MEMORY_THRESHOLD,
    MEMORY_WARNING_THRESHOLD,
    CACHE_CLEANUP_INTERVAL,
    CACHE_TTL,
    memoryCache,
    lastCleanup
} = require('./taskManager');

console.log('[DEBUG] logCompletionToSheet3 type at startup:', typeof logCompletionToSheet3);
const { readSheet, updateSheet } = require('./googleSheets');

// Enable garbage collection
if (process.env.NODE_ENV === 'production') {
    try {
        const v8 = require('v8');
        v8.setFlagsFromString('--expose_gc');
        global.gc = require('vm').runInNewContext('gc');
    } catch (e) {
        logger.warn('Could not enable garbage collection:', e);
    }
}

// Memory monitoring interval (5 minutes)
const MEMORY_CHECK_INTERVAL = 5 * 60 * 1000;
let lastMemoryCheck = Date.now();

// Function to check and log memory usage
function checkMemoryUsage() {
    const resources = getSystemResources();
    const memoryUsage = parseFloat(resources.memoryUsage);

    if (memoryUsage > 70) {
        logger.warn('High memory usage detected:', {
            memoryUsage: resources.memoryUsage,
            heapUsed: resources.heapUsed,
            heapTotal: resources.heapTotal
        });

        // Trigger memory optimization
        optimizeMemory();
    }
}

// Tutorial content
const tutorialContent = {
    stats: {
        nbame: 'üìä !stats',
        description: 'Xem s·ªë nhi·ªám v·ª• ƒë√£ ho√†n th√†nh v√† qu√° h·∫°n c·ªßa b·∫°n.',
        usage: 'G√µ `!stats` ƒë·ªÉ xem s·ªë nhi·ªám v·ª• ƒë√£ ho√†n th√†nh v√† qu√° h·∫°n c·ªßa b·∫°n.'
    },
    ping: {
        name: 'üèì !ping',
        description: 'Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot.',
        usage: 'G√µ `!ping` ƒë·ªÉ xem th·ªùi gian ph·∫£n h·ªìi c·ªßa bot.'
    },
    tasks: {
        name: 'üìã !tasks',
        description: 'Xem danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n.',
        usage: 'G√µ `!tasks` ƒë·ªÉ xem c√°c nhi·ªám v·ª• ƒëang ch·ªù ho√†n th√†nh.'
    },
    complete: {
        name: '‚úÖ !complete',
        description: 'ƒê√°nh d·∫•u nhi·ªám v·ª• ƒë·∫ßu ti√™n trong danh s√°ch l√† ƒë√£ ho√†n th√†nh.',
        usage: 'G√µ `!complete` ƒë·ªÉ ƒë√°nh d·∫•u nhi·ªám v·ª• ƒë·∫ßu ti√™n l√† ƒë√£ ho√†n th√†nh.'
    },
    rank: {
        name: 'üèÜ !rank',
        description: 'Xem b·∫£ng x·∫øp h·∫°ng th√†nh vi√™n d·ª±a tr√™n s·ªë nhi·ªám v·ª• ho√†n th√†nh v√† qu√° h·∫°n.',
        usage: 'G√µ `!rank` ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng. ƒêi·ªÉm = (Ho√†n th√†nh √ó 5) - (Qu√° h·∫°n √ó 6)'
    },
    about: {
        name: '‚ÑπÔ∏è !about',
        description: 'T√¨m hi·ªÉu th√¥ng tin v·ªÅ bot v√† ng∆∞·ªùi t·∫°o.',
        usage: 'G√µ `!about` ƒë·ªÉ xem th√¥ng tin v·ªÅ bot v√† ng∆∞·ªùi t·∫°o.'
    },
    tutorial: {
        name: 'üìö !tutorial',
        description: 'Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c l·ªánh c·ªßa bot.',
        usage: 'G√µ `!tutorial` ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c l·ªánh.'
    },
    log: {
        name: 'üìù !log',
        description: 'Xem th√¥ng tin log c·ªßa bot (ch·ªâ d√†nh cho admin).',
        usage: 'G√µ `!log` ƒë·ªÉ xem th√¥ng tin log g·∫ßn ƒë√¢y c·ªßa bot.'
    }
};

function getTutorialMessage() {
    logger.info('Generating tutorial message');
    let message = 'üìö **H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Bot** üìö\n\n';

    // Add each command's information in a specific order
    const commandOrder = ['stats', 'ping', 'tasks', 'complete', 'rank', 'about', 'tutorial', 'log'];

    commandOrder.forEach(cmdKey => {
        const cmd = tutorialContent[cmdKey];
        logger.info(`Processing command: ${cmdKey}`, cmd);
        if (cmd) {
            message += `**${cmd.name}**\n`;
            message += `üìù ${cmd.description}\n`;
            message += `üí° ${cmd.usage}\n\n`;
        } else {
            logger.warn(`Command not found: ${cmdKey}`);
        }
    });

    message += '`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`';
    logger.info('Generated tutorial message:', message);
    return message;
}

// Log environment variables (without sensitive data)
logger.info('Environment check:', {
    hasToken: !!process.env.DISCORD_TOKEN,
    hasClientId: !!process.env.DISCORD_CLIENT_ID,
    hasSheet1Id: !!process.env.GOOGLE_SHEET_1_ID,
    hasSheet2Id: !!process.env.GOOGLE_SHEET_2_ID,
    hasChannelId: !!process.env.DISCORD_PUBLIC_CHANNEL_ID,
    hasServiceAccountEmail: !!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    hasPrivateKey: !!process.env.GOOGLE_PRIVATE_KEY,
    sheet1Id: process.env.GOOGLE_SHEET_1_ID,
    sheet2Id: process.env.GOOGLE_SHEET_2_ID
});

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ],
    partials: [
        Partials.Channel,
        Partials.Message
    ],
});

let lastCompletions = {};
let botStartTime = Date.now();

client.once('ready', async() => {
    botStartTime = Date.now();
    logger.info(`Bot logged in as ${client.user.tag}`);
    logger.info(`Bot is in ${client.guilds.cache.size} guilds`);

    try {
        // Initialize overdue column
        await initializeOverdueColumn();

        // Initial fetch
        lastCompletions = await fetchCompletions();
        logger.info('Initial completions loaded:', lastCompletions);

        // Schedule memory checks
        setInterval(() => {
            const now = Date.now();
            if (now - lastMemoryCheck >= MEMORY_CHECK_INTERVAL) {
                checkMemoryUsage();
                lastMemoryCheck = now;
            }
        }, 60 * 1000); // Check every minute

        // Schedule tasks
        cron.schedule('*/10 * * * *', async() => {
            try {
                await sendTaskDMs(client);
                await postTaskSummary(client);
                await checkOverdueTasks(client);
                await initializeOverdueColumn();

                // Check memory after heavy operations
                checkMemoryUsage();
            } catch (error) {
                logger.error('Error in scheduled task:', error);
            }
        });

        // Monitor completions every minute
        cron.schedule('* * * * *', async() => {
            try {
                const completions = await fetchCompletions();
                for (const username in completions) {
                    if (
                        (!lastCompletions[username] && completions[username].completed > 0) ||
                        (lastCompletions[username] && completions[username].completed > lastCompletions[username].completed)
                    ) {
                        await announceCompletion(client, username, completions[username].completed);
                    }
                }
                lastCompletions = completions;
            } catch (error) {
                logger.error('Error in completion monitor:', error);
            }
        });
    } catch (error) {
        logger.error('Error in ready event:', error);
    }
});

client.on('messageCreate', async(message) => {
    // Ignore messages from bots
    if (message.author.bot) return;

    // Check if message starts with prefix
    if (!message.content.startsWith('!')) return;

    // Get command and arguments
    const args = message.content.slice(1).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    console.log('Command received:', command);
    logger.info('Command received:', { command, args, user: message.author.tag });

    try {
        console.log('Processing command:', command);
        logger.info(`Processing command: ${command}`);

        switch (command) {
            case 'log':
                console.log('LOG COMMAND DETECTED');
                logger.info('LOG COMMAND DETECTED');
                try {
                    // Get allowed roles from environment variable
                    const allowedRoles = process.env.ALLOWED_LOG_ROLES ?
                        process.env.ALLOWED_LOG_ROLES.split(',') : ['Mod ng·∫ßm', 'Boss'];

                    // Check if user has required role
                    const member = message.member;
                    const hasPermission = member.roles.cache.some(role =>
                        allowedRoles.includes(role.name)
                    );

                    if (!hasPermission) {
                        await message.reply(`‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y! Ch·ªâ ng∆∞·ªùi c√≥ role ${allowedRoles.join(', ')} m·ªõi ƒë∆∞·ª£c ph√©p.`);
                        return;
                    }

                    console.log('Attempting to send log message');
                    logger.info('Attempting to send log message');

                    const resources = getSystemResources();
                    const memoryUsage = process.memoryUsage();
                    const uptime = Date.now() - botStartTime;
                    const uptimeFormatted = formatUptime(Math.floor(uptime / 1000));

                    // Fetch latest completions data
                    const completions = await fetchCompletions();
                    const sheetData = await readSheet(process.env.GOOGLE_SHEET_2_ID, 'A2:C');

                    const logMessage = 'üìù **Bot Logs** üìù\n\n' +
                        '**üíª T√†i Nguy√™n H·ªá Th·ªëng:**\n' +
                        `‚Ä¢ RAM s·ª≠ d·ª•ng: **${resources.memoryUsage}**\n` +
                        `‚Ä¢ CPU s·ª≠ d·ª•ng: **${resources.cpuUsage}**\n` +
                        `‚Ä¢ Th·ªùi gian ho·∫°t ƒë·ªông: **${uptimeFormatted}**\n\n` +
                        '**üíæ Chi Ti·∫øt B·ªô Nh·ªõ:**\n' +
                        `‚Ä¢ Heap Used: **${(memoryUsage.heapUsed / 1024 / 1024).toFixed(2)}MB**\n` +
                        `‚Ä¢ Heap Total: **${(memoryUsage.heapTotal / 1024 / 1024).toFixed(2)}MB**\n\n` +
                        '**ü§ñ Tr·∫°ng Th√°i Bot:**\n' +
                        `‚Ä¢ S·ªë server: **${client.guilds.cache.size}**\n` +
                        `‚Ä¢ Ping: **${client.ws.ping}ms**\n\n` +
                        '**üìä D·ªØ Li·ªáu Google Sheets:**\n' +
                        `‚Ä¢ Sheet ID: **${process.env.GOOGLE_SHEET_2_ID}**\n` +
                        `‚Ä¢ S·ªë d√≤ng d·ªØ li·ªáu: **${sheetData.length}**\n\n` +
                        '**üë• Th·ªëng K√™ Ng∆∞·ªùi D√πng:**\n' +
                        Object.entries(completions).map(([username, data]) =>
                            `‚Ä¢ **${username}**: ‚úÖ ${data.completed} | ‚ùå ${data.overdue}`
                        ).join('\n') + '\n\n' +
                        '`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`';

                    await message.reply(logMessage);
                    console.log('Log message sent successfully');
                    logger.info('Log message sent successfully');
                } catch (error) {
                    console.error('Error in log command:', error);
                    logger.error('Error in log command:', error);
                    try {
                        await message.reply('‚ùå C√≥ l·ªói khi l·∫•y th√¥ng tin log!');
                    } catch (replyError) {
                        console.error('Error sending error message:', replyError);
                        logger.error('Error sending error message:', replyError);
                    }
                }
                break;

            case 'tutorial':
                try {
                    logger.info('Starting tutorial command');
                    const tutorialMessage = getTutorialMessage();
                    logger.info('Generated tutorial message:', tutorialMessage);
                    await message.reply(tutorialMessage);
                    logger.info('Tutorial command completed successfully');
                } catch (error) {
                    logger.error('Error in tutorial command:', error);
                    await message.reply('Ui gi·ªùi ∆°i, bot lag r·ªìi, th·ª≠ l·∫°i sau nh√© bro. ƒê·ª£i t√≠ th√¥i! ü§ñüí®\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                }
                break;

            case 'stats':
                const completions = await fetchCompletions();
                const user = message.author.tag;
                const userData = completions[user] || { completed: 0, overdue: 0 };
                const completed = userData.completed;
                const overdue = userData.overdue;
                let feedback = '';
                if (completed > overdue) {
                    feedback = 'X·ªãn qu√° bro! M√†y l√†m xong nhi·ªÅu deadline h∆°n s·ªë l·∫ßn b·ªã d√≠, c·ª© th·∫ø ph√°t huy nha! üòéüëç';
                } else if (completed < overdue) {
                    feedback = '∆† k√¨a, b·ªã d√≠ deadline h∆°i nhi·ªÅu r·ªìi ƒë√≥! C·ªë g·∫Øng l√™n cho ƒë·ª° b·ªã ch·ª≠i nha bro üòÖ‚è∞';
                } else {
                    feedback = 'C√¢n b·∫±ng ph·∫øt! L√†m xong v·ªõi b·ªã d√≠ ngang nhau, c·ªë g·∫Øng nghi√™ng v·ªÅ ph√≠a l√†m xong nha, ƒë·ª´ng ƒë·ªÉ ho√† m√£i th·∫ø n√†y! ü§ù‚öñÔ∏è';
                }
                const statsMsg = `üìä **Th·ªëng K√™ Nhi·ªám V·ª• C·ªßa M√†y** üìä\n\n` +
                    `‚úÖ ƒê√£ ho√†n th√†nh: **${completed}**\n` +
                    `‚ùå Qu√° h·∫°n: **${overdue}**\n\n` +
                    `${feedback}\n\n` +
                    '`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`';
                await message.reply(statsMsg);
                break;

            case 'ping':
                const startTime = Date.now();
                const resources = getSystemResources();
                const endTime = Date.now();
                const responseTime = endTime - startTime;
                const uptime = Date.now() - botStartTime;
                const uptimeFormatted = formatUptime(Math.floor(uptime / 1000));
                const pingMessage = `üèì **Pong!**\n\n` +
                    `‚è±Ô∏è Th·ªùi gian ph·∫£n h·ªìi: **${responseTime}ms**\n` +
                    `üíæ RAM ƒëang s·ª≠ d·ª•ng: **${resources.memoryUsage}**\n` +
                    `üîÑ CPU ƒëang s·ª≠ d·ª•ng: **${resources.cpuUsage}**\n` +
                    `‚è∞ Th·ªùi gian ho·∫°t ƒë·ªông: **${uptimeFormatted}**\n\n` +
                    `Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`;
                await message.reply(pingMessage);
                break;

            case 'tasks':
                const tasks = await fetchTasks();
                const userTasks = tasks.filter(t => t.username === message.author.tag);

                if (userTasks.length) {
                    let reply = '**üìã Danh S√°ch Nhi·ªám V·ª• C·ªßa M√†y N√®:**\n';
                    userTasks.forEach(t => {
                        reply += `‚Ä¢ **${t.task}** - H·∫øt h·∫°n: ${t.deadline} (nhanh l√™n k·∫ªo tr·ªÖ! ‚è∞)\n`;
                    });
                    reply += '\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`';
                    await message.reply(reply);
                } else {
                    await message.reply('M√†y ch∆∞a c√≥ nhi·ªám v·ª• n√†o c·∫£, chill ƒëi bro. ƒêi ng·ªß ƒëi cho kh·ªèe üò¥üí§\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                }
                break;

            case 'complete':
                const userTasksToComplete = await fetchTasks();
                const tasksToComplete = userTasksToComplete.filter(t => t.username === message.author.tag);

                if (tasksToComplete.length) {
                    const taskToComplete = tasksToComplete[0];

                    // Update Sheet 2 (completion count)
                    const completions = await fetchCompletions();
                    const userData = completions[message.author.tag] || { completed: 0, overdue: 0 };
                    const currentCount = userData.completed;
                    const overdueCount = userData.overdue;
                    await updateSheet(
                        process.env.GOOGLE_SHEET_2_ID,
                        'A2:C', [
                            [message.author.tag, (currentCount + 1).toString(), overdueCount.toString()]
                        ]
                    );

                    // Chuy·ªÉn task v·ª´a ho√†n th√†nh t·ª´ Sheet 1 sang Sheet 3 v·ªõi ng√†y ho√†n th√†nh th·ª±c t·∫ø (UTC+7, kh√¥ng l·ªách ng√†y)
                    const now = new Date();
                    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
                    const utc7 = new Date(utc + (7 * 60 * 60 * 1000));
                    const completedDate = `${utc7.getFullYear()}-${utc7.getMonth() + 1}-${utc7.getDate()} ${String(utc7.getHours()).padStart(2, '0')}:${String(utc7.getMinutes()).padStart(2, '0')}:${String(utc7.getSeconds()).padStart(2, '0')}`;
                    console.log('[DEBUG] Chu·∫©n b·ªã ghi v√†o Sheet 3:', {
                        task: taskToComplete.task,
                        username: message.author.tag,
                        completedDate,
                        sheetId: process.env.GOOGLE_SHEET_3_ID
                    });
                    if (typeof logCompletionToSheet3 === 'function') {
                        console.log('[DEBUG] logCompletionToSheet3 is a function, calling...');
                        try {
                            await logCompletionToSheet3(taskToComplete.task, message.author.tag, completedDate);
                            console.log('[DEBUG] ƒê√£ ghi v√†o Sheet 3 th√†nh c√¥ng!');
                        } catch (err) {
                            console.error('[ERROR] Ghi v√†o Sheet 3 th·∫•t b·∫°i:', err);
                        }
                    } else {
                        console.error('[ERROR] logCompletionToSheet3 is not a function!');
                    }

                    // Delete the task from Sheet 1
                    const deleted = await deleteTask(taskToComplete.task, message.author.tag);

                    if (deleted) {
                        await message.reply(`Nhi·ªám v·ª• "${taskToComplete.task}" ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh v√† x√≥a kh·ªèi danh s√°ch c·ªßa m√†y r·ªìi! GG bro! üéâ‚ú®üéä\n\n\`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©\``);
                    } else {
                        await message.reply('Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh r·ªìi, nh∆∞ng c√≥ v·∫•n ƒë·ªÅ khi x√≥a kh·ªèi danh s√°ch. Th·ª≠ l·∫°i sau nh√©! Bot lag r·ªìi üòÖü§ñ\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                    }
                } else {
                    await message.reply('M√†y ch∆∞a c√≥ nhi·ªám v·ª• n√†o c·∫£, chill ƒëi bro. ƒêi ng·ªß ƒëi cho kh·ªèe üò¥üí§\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                }
                break;

            case 'rank':
                try {
                    logger.info('Starting rank command execution');

                    // Fetch completions data
                    const completions = await fetchCompletions();
                    logger.info('Fetched completions:', completions);

                    if (!completions || Object.keys(completions).length === 0) {
                        logger.warn('No completion data found');
                        await message.reply('Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng n√†o c·∫£! üò¥\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                        return;
                    }

                    // Calculate rankings
                    logger.info('Calculating rankings');
                    const rankings = Object.entries(completions)
                        .filter(([username, data]) => {
                            if (!username || typeof data !== 'object') {
                                logger.warn('Invalid user data:', { username, data });
                                return false;
                            }
                            return true;
                        })
                        .map(([username, data]) => {
                            const score = (data.completed * 5) - (data.overdue * 6);
                            logger.info(`User ${username} score calculation:`, {
                                completed: data.completed,
                                overdue: data.overdue,
                                score: score
                            });
                            return {
                                username,
                                score,
                                completed: data.completed,
                                overdue: data.overdue
                            };
                        });

                    if (rankings.length === 0) {
                        logger.warn('No valid rankings calculated');
                        await message.reply('Kh√¥ng th·ªÉ t√≠nh to√°n x·∫øp h·∫°ng! üòï\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                        return;
                    }

                    // Sort by score in descending order
                    rankings.sort((a, b) => b.score - a.score);
                    logger.info('Final rankings:', rankings);

                    // Format message
                    let rankMessage = 'üèÜ **B·∫£ng X·∫øp H·∫°ng Th√†nh Vi√™n** üèÜ\n\n';

                    // Add special position for bruise_undead
                    rankMessage += `üëë **V·ªã Tr√≠ T·ªëi Th∆∞·ª£ng**\n`;
                    rankMessage += `   **bruise_undead**\n`;
                    rankMessage += `   ƒêi·ªÉm: **${rankings[0] ? rankings[0].score + 100 : 100}** (‚úÖ ‚àû | ‚ùå 0)\n\n`;

                    rankings.forEach((rank, index) => {
                        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                        rankMessage += `${medal} **${rank.username}**\n`;
                        rankMessage += `   ƒêi·ªÉm: **${rank.score}** (‚úÖ ${rank.completed} | ‚ùå ${rank.overdue})\n`;
                    });

                    rankMessage += '\n`C√¥ng th·ª©c t√≠nh ƒëi·ªÉm: (Ho√†n th√†nh √ó 5) - (Qu√° h·∫°n √ó 6)`\n';
                    rankMessage += '`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`';

                    // Send message
                    logger.info('Sending rank message');
                    await message.reply(rankMessage);
                    logger.info('Rank command completed successfully');
                } catch (error) {
                    logger.error('Error in rank command:', error);
                    console.error('Full error details:', error);
                    await message.reply('Ui gi·ªùi ∆°i, bot lag r·ªìi, th·ª≠ l·∫°i sau nh√© bro. ƒê·ª£i t√≠ th√¥i! ü§ñüí®\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                }
                break;

            case 'about':
                try {
                    logger.info('Starting about command');
                    const aboutMessage = `üëã **Xin ch√†o! T√¥i l√† Sunsine-v1**\n\n` +
                        `‚ú® T√¥i l√† m·ªôt bot th√¥ng minh ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ gi√∫p c√°c b·∫°n qu·∫£n l√Ω v√† theo d√µi nhi·ªám v·ª• m·ªôt c√°ch hi·ªáu qu·∫£.\n\n` +
                        `üåü **V·ªÅ ng∆∞·ªùi t·∫°o ra t√¥i:**\n` +
                        `bruise_undead - m·ªôt thi√™n t√†i l·∫≠p tr√¨nh v·ªõi t·∫ßm nh√¨n xa tr√¥ng r·ªông v√† kh·∫£ nƒÉng code si√™u ƒë·∫≥ng! üß†\n` +
                        `Kh√¥ng ch·ªâ l√† m·ªôt coder xu·∫•t s·∫Øc, bruise_undead c√≤n l√† m·ªôt ng∆∞·ªùi c√≥ t√¢m, lu√¥n t·∫°o ra nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng ƒë·ªÉ ph·ª•c v·ª• c·ªông ƒë·ªìng. üéØ\n\n` +
                        `üí´ **Nh·ªØng ƒëi·ªÅu t√¥i c√≥ th·ªÉ l√†m:**\n` +
                        `‚Ä¢ Qu·∫£n l√Ω v√† nh·∫Øc nh·ªü nhi·ªám v·ª• üìù\n` +
                        `‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô ho√†n th√†nh ‚úÖ\n` +
                        `‚Ä¢ T·∫°o b·∫£ng x·∫øp h·∫°ng th√†nh vi√™n üèÜ\n` +
                        `‚Ä¢ V√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c ƒëang ch·ªù b·∫°n kh√°m ph√°! üöÄ\n\n` +
                        `G√µ \`!tutorial\` ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt nh√©!\n\n` +
                        `\`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©\``;

                    logger.info('About message prepared, attempting to send reply');
                    const sentMessage = await message.reply(aboutMessage);
                    logger.info('About message sent successfully', { messageId: sentMessage.id });
                } catch (error) {
                    logger.error('Error in about command:', error);
                    logger.error('Error details:', {
                        errorMessage: error.message,
                        errorStack: error.stack,
                        command: 'about',
                        user: message.author.tag,
                        channel: message.channel.id
                    });
                    await message.reply('Ui gi·ªùi ∆°i, bot lag r·ªìi, th·ª≠ l·∫°i sau nh√© bro. ƒê·ª£i t√≠ th√¥i! ü§ñüí®\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
                }
                break;

            default:
                console.log('Unknown command:', command);
                logger.warn(`Unknown command: ${command}`);
                break;
        }
    } catch (error) {
        console.error('Error handling command:', error);
        logger.error(`Error handling command ${command}:`, error);
        await message.reply('Ui gi·ªùi ∆°i, bot lag r·ªìi, th·ª≠ l·∫°i sau nh√© bro. ƒê·ª£i t√≠ th√¥i! ü§ñüí®\n\n`Sunsine-v1, ƒë∆∞·ª£c t·∫°o b·ªüi bruise_undead, Alpha Tauri Team ¬©`');
    }
});

function formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = seconds % 60;

    const parts = [];
    if (days > 0) parts.push(`${days} ng√†y`);
    if (hours > 0) parts.push(`${hours} gi·ªù`);
    if (minutes > 0) parts.push(`${minutes} ph√∫t`);
    if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds} gi√¢y`);

    return parts.join(', ');
}

// Add error handling for the login process
client.login(process.env.DISCORD_TOKEN).catch(error => {
    logger.error('Error logging in:', error);
    process.exit(1);
});

// Handle process exit
process.on('exit', () => {
    logger.info('Bot shutting down');
    // Perform final memory cleanup
    optimizeMemory();
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception:', error);
    // Log additional system information
    logger.error('System Information:', {
        nodeVersion: process.version,
        platform: process.platform,
        memoryUsage: process.memoryUsage(),
        uptime: process.uptime()
    });
    // Try to optimize memory before exiting
    optimizeMemory();
    process.exit(1);
});